#+AUTHOR: Ynjxsjmh
#+CREATOR: Winy
#+DATE: <2021-01-31 Sun>
#+EMAIL: ynjxsjmh@gmail.com
#+TITLE: Dotfiles usage guide
#+OPTIONS: title:t date:t author:t email:nil timestamp:t creator:nil ;; Meta
#+OPTIONS: toc:t num:t H:5                         ;; TOC
#+OPTIONS: ':nil *:t |:t -:t ::t <:t \n:nil ^:{}   ;; Syntax
#+OPTIONS: broken-links:nil inline:t
#+OPTIONS: todo:t p:nil pri:nil stat:t tasks:t     ;; TODO
#+OPTIONS: c:nil d:(not "LOGBOOK") prop:nil        ;; Drawer
#+OPTIONS: arch:headline tags:t tex:t f:t e:t
#+FILETAGS: ::


* stow -t /etc etc

=pacman.conf= - pacman package manager configuration file.

* stow bash

=.profile= sets =OS_TYPE= and =DISTRO_TYPE=.

=.zshenv= sets zsh configuration place. However, you can set it in =.pam.environment= if you like (According to [[https://github.com/linux-pam/linux-pam/commit/ecd526743a27157c5210b0ce9867c43a2fa27784][linux-pam/linux-pam@ecd5267]], Reading =~/.pam_environment= is deprecated and the feature will be removed at some point in the future.).

If you already have =.profile= in home directory, =stow bash= will fail. Remove the original =.profile= or use =--adopt= option.

* stow config
** i3

Here I use [[https://github.com/Airblader/i3][i3-gaps]]. For i3 user guide, you can refer to [[https://i3wm.org/docs/userguide.html][i3: i3 User’s Guide]] or [[https://wiki.gentoo.org/wiki/I3][i3 - Gentoo Wiki]] as a supplement. This config mainly changes the following:

- Modifier key changed to =Win=. In i3, commands are invoked with a modifier key, referred to as =$mod=. This is =Alt= (Mod1) by default, with =Super= (Mod4) being a popular alternative. Super is the key usually represented on a keyboard as a Windows icon, or on an Apple keyboard as a Command key. 
- Four navigation shortcuts, j, k, l and "semicolon" changed to vim style, h, j, k, l.
- =-= and =\= to split in horizontal and vertical orientation

Other key bindings keep same with the [[https://github.com/i3/i3/blob/next/etc/config.keycodes][default]], generally are:

- *General*
  - ~<Enter>~ open a terminal (konsole)
  - =d= open program launcher (Rofi)
  - =E= exit i3
  - =C= reload config file
  - =R= restart i3 in place

- *Mode* (~<Esc>~ or ~<Enter>~ to back to normal mode)
  - =r= resize mode
  - =o= execution mode
  - =z= system mode
  - =G= gaps mode

- *Window*
  - =s= stacked layout
  - =w= tabbed layout
  - =e= vertical and horizontal layout (switches to and between them)
  - =f= toggle fullscreen
  - =Q= kill window (does normal close if application supports it)

To memorize i3’s shortcuts, you can have a look at [[https://i3wm.org/docs/refcard.html][i3 - Reference Card]]. To debug i3, [[https://i3wm.org/docs/debugging.html][i3: Debugging i3: How To]] is a getting started article.

If you want to bind some symbol keys but don't know what they're called. You can run =xev= (=xev -event keyboard= if you only care for key presses) from a terminal and press your desired key. =xev= should output information about the events it got from X11.

Some tools you must install:

- [[https://github.com/derf/feh][feh]] to set wallpaper.
- [[https://github.com/davatorium/rofi][Rofi]] as program launcher(=d=, first char of dmenu) and window selector(=/=, vim search key).
- [[https://github.com/alacritty/alacritty][alacritty]] as terminator.
- [[https://github.com/meskarune/i3lock-fancy][i3lock-fancy]] as screen locker.

To use another window manager with plasma, you can refer to [[https://userbase.kde.org/Tutorials/Using_Other_Window_Managers_with_Plasma][Tutorials/Using Other Window Managers with Plasma - KDE UserBase Wiki]]. To use i3 as WM, you can refer to /u/shinyeye4's [[https://www.reddit.com/r/unixporn/comments/64mihc/i3_kde_plasma_a_match_made_in_heaven/dg4k0wq?utm_source=share&utm_medium=web2x&context=3][comment]] and config [[https://github.com/avivace/dotfiles#i3--plasma-integration][i3 + Plasma]].

** polybar

The config syntax of polybar mainly contains two parts: /bar/ and /module/, remains are mainly customized variables or module specific keys. For example, following defines a bar named =mybar= which contains only one module called =mymodule= at the center of =mybar=:

#+BEGIN_SRC
[bar/mybar]
modules-center = mymodule

[module/mymodule]
str = My Module
#+END_SRC

Each module actually should have a =type= filed, you can click to view all of them in section /Modules/ of [[https://github.com/polybar/polybar/wiki][polybar/polybar Wiki]]. The following is a very basic polybar configuration of real which defines a bar named =mybar= with a module called =date=:

#+BEGIN_SRC
[bar/mybar]
modules-right = date

[module/date]
type = internal/date
date = %Y-%m-%d%
#+END_SRC

In a word, configuring polybar is just to config each module and place them according to your desired order in bar. By default polybar also installs a sample configuration with many preconfigured modules in =/usr/share/doc/polybar/config=. Also, [[https://github.com/jaagr/dots/tree/master/.config/polybar/testing][jaagr/dots]] lists examples of possible module by polybar author .

Where to find other configurations?

- [[https://forum.archlabslinux.com/t/show-us-your-polybar/159/1][Show Us Your Polybar - ArchLabs Linux]]
- [[https://github.com/adi1090x/polybar-themes][adi1090x/polybar-themes]]
- [[https://github.com/Murzchnvok/polybar-collection][Murzchnvok/polybar-collection]]

If you use i3wm, you probably cannot stand the title bar in tabbed/stacking mode while using polybar. Luckily, there are many third party libraries that help displaying window titles directly in polybar (Remember make script executable with ~chmod +x~):

- [[https://github.com/meelkor/polybar-i3-windows][meelkor/polybar-i3-windows]]. Python script that shows application icon and window titles of all workspaces. Title order changes with window movement.
- [[https://github.com/tam-carre/polywins][tam-carre/polywins]]. Shell script that shows window title of current workspace. Title order doesn't change with window movement in same workspace unless reload i3 config.
- [[https://github.com/aroma1994/polybar-windows][aroma1994/polybar-windows]]. Shell script that shows window title of current workspace. Title order doesn't change with window movement in same workspace unless reload i3 config. Have some bugs highlighting current focused window.
- [[https://github.com/folke/polydock][folke/polydock]]
- [[https://github.com/melangue/bspwm-window-titles][melangue/bspwm-window-titles]]

Once you choose one, you can now hide i3 title bar by setting window title font size to zero with something like ~font pango:DejaVu Sans Mono 0~ in configuration file. (There are some solutions with [[https://i3wm.org/docs/userguide.html#default_border][4.12. Default border style for new windows]] like ~default_border pixel 1~ or ~for_window [class="^.*"] border pixel 1~ but all don't work for me)

------

To make the bar fancy, most configurations are highly dependent on extra icons, so make sure you install one of [[https://github.com/polybar/polybar/wiki/Fonts#icon-fonts][popular icon fonts]]. If you want try something new, you can go to the cheatsheet page for easier search:

- [[https://www.nerdfonts.com/cheat-sheet][Nerd Fonts Cheatsheet]]. Except patched fonts listed in assets, there is also other third-party patched font such as [[https://github.com/laishulu/Sarasa-Mono-SC-Nerd][laishulu/Sarasa-Mono-SC-Nerd]], [[https://github.com/jonz94/Sarasa-Gothic-Nerd-Fonts][jonz94/Sarasa-Gothic-Nerd-Fonts]].
- [[https://fontawesome.com/v5/cheatsheet/free/][FontAwesome v5 Cheatsheet]]
- [[https://fonts.google.com/icons][Material icons Cheetsheet]]
- Search [[https://materialdesignicons.com/][Material Design Icons]]
- Search [[https://feathericons.com/][Feather Icons]]
- Search [[https://oblador.github.io/react-native-vector-icons/][react-native-vector-icons]]

** terminator

Documentation for all of Terminator's keybindings and config options in man pages is included in the source/packages. See:

#+BEGIN_SRC bash
man terminator
man terminator_config
#+END_SRC

** tmux
*** Simple Guide

[[https://github.com/tmux/tmux][tmux]] documentation can be found at [[https://github.com/tmux/tmux/wiki][Wiki · tmux/tmux]]. For a local one, you can refer to =man 1 tmux.= Here lists some useful information:

| Tmux Command      | Short Form |
|-------------------+------------|
| set-option        | set        |
| set-window-option | setw       |
| bind-key          | bind       |
| unbind-key        | unbind     |
| display-message   | display    |
| run-shell         | run        |
| if-shell          | if         |


| Variable Name | Alias         | Replaced With                             |
|---------------+---------------+-------------------------------------------|
|               | #(command)    | First line of command’s output            |
|               | #[attributes] | Color or attribute change                 |
| host          | #H            | Hostname of local host                    |
| host_short    | #h            | Hostname of local host (no domain name)   |
| pane_id       | #D            | Unique pane ID                            |
| pane_index    | #P            | Index of pane                             |
| pane_path     | #T            | Path of pane (can be set by application)  |
| pane_title    | #T            | Title of pane (can be set by application) |
| session_name  | #S            | Name of session                           |
| window_flags  | #F            | Window flags                              |
| window_index  | #I            | Index of window                           |
| window_name   | #W            | Name of window                            |
|               | ##            | A literal ‘#’                             |

*** Introduction

This setting remaps prefix key to =`= by =set-option -g prefix `=. After you are familiar with this binding, if you are on a remote box, you can simply do a =c-b := and type it.

- =M-hjkl= selects panes with vi movement commands.
- =M-HL= selects windows with vi movement commands.
- [[https://github.com/tmux/tmux/issues/674][C-S-letter is same with C-letter]].

- M-✥  : doesn't respond
- S-✥  : ⇄: move pane to   window
- M-S-✥: ⇄: move pane from window
- C-M-✥: swap panes
- C-✥  : small pane size
- C-S-✥: large pane size
- C-M-S-✥: unbind yet

*** Tmux Plugin Manager

I'm using [[https://github.com/tmux-plugins/tpm][TPM]] to manage tmux plugins. To use it, you need to clone TPM first:

#+BEGIN_SRC bash
$ git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#+END_SRC

Then reload TMUX environment to make sure TPM is sourced:

#+BEGIN_SRC bash
# type this in terminal if tmux is already running
$ tmux source ~/.config/tmux/.tmux.conf
#+END_SRC

To install a plugin, you need to do the following steps:

1. Add new plugin to =~/.tmux.conf= with =set -g @plugin '...'=
2. Reload TMUX environment so TPM is sourced: =$ tmux source ~/.config/tmux/.tmux.conf=
3. Press =prefix + I= (capital i, as in *I*nstall) to fetch the plugin.

If you want to manage plugins via the command line, you can add the following config to =.tmux.conf=:

#+BEGIN_SRC bash
$ set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.tmux/plugins/'
#+END_SRC

Then run the following command in terminal:

#+BEGIN_SRC bash
$ ~/.tmux/plugins/tpm/bin/install_plugins
#+END_SRC

See [[https://github.com/tmux-plugins/tpm/blob/master/docs/managing_plugins_via_cmd_line.md][Managing plugins via the command line · tmux-plugins/tpm]] for more detail.

If you are suffering from network problem, such as couldn't perform git clone, you can edit the =clone_plugin()= function in =~/.tmux/plugins/tpm/scripts/install_plugins.sh=.

*** Possible Error

If you have a different version of tmux, you may get some errors. For example, with tmux 2.6, you may get

#+BEGIN_SRC bash
~/.config/tmux/.tmux.conf:56: invalid or unknown command: unbind \"
~/.config/tmux/.tmux.conf:57: unknown key: \\
#+END_SRC

To fix these, you could either upgrade the tmux or just adjust the syntax to version 2.6 by checking =tmux list-keys=

#+BEGIN_SRC bash
unbind '"'
bind \ split-window -h
#+END_SRC

** zsh

Download zsh

| Platform | Command              |
|----------+----------------------|
| Arch     | sudo pacman -S zsh   |
| Ubuntu   | sudo apt install zsh |

Download antigen

#+BEGIN_SRC bash
$ sudo mkdir -p /usr/share/zsh/share/
$ cd /usr/share/zsh/share
# Common download
$ curl -L git.io/antigen > antigen.zsh
# On Ubuntu lower version
$ sudo wget https://raw.githubusercontent.com/zsh-users/antigen/v2.2.3/bin/antigen.zsh
# On Arch
$ yay -S antigen-git
#+END_SRC

ZSH loads the following files in order.
=$ZDOTDIR= is used instead of =$HOME= if set.

1. /etc/zsh/zshenv (always)
If NO_RCS is set, none of the following are run.
2. [@2] ~/.zshenv (Usually run for all shells)
3. /etc/zsh/zprofile (login)
4. ~/.zprofile (login)
5. /etc/zsh/zshrc (interactive)
6. ~/.zshrc (interactive)
7. /etc/zsh/zlogin (login)
8. ~/.zlogin (login)

If a login shell, the following are run on logout or exit.
- ~/.zlogout
- /etc/zlogout

* themes

- Telegram Desktop: =WindowBg= to =#f5f2ee=.
- KDE theme: Appearance -> Colors -> Genshin from CSSlayer
